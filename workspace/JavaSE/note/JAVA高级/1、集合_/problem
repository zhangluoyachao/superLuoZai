1、哈希Code以及哈希函数的实现原理
2、红黑树
3、TreeSet TreeMap中的比较器
    a.外部比较 Comparator
                单独创建一个类 去实现User对象的比较规则
                再实现Comparator接口中compare方法
                class Com implements Comparator<User> {
                     @Override
                     public int compare(User o1, User o2) {
                         //返回值决定了排序顺序    正序  倒序  相同
                         //o1.getId()-o2.getId() 正序
                         //o2.getId()-o1.getId() 倒序
                         return o1.getId() - o2.getId();
                     }
                }

                这样实现，需要创建一个类，并且实现接口与其方法，非常复杂，
                有其他方法来替换它：
                1、匿名内部类
                2、lamada表达式（jdk1.8以后）
                Comparator<User> com = (o1, o2) -> o1.getId() - o2.getId();
                Set<User> set = new TreeSet<>(com);
                可以简化==>
                Set<User> set = new TreeSet<>((o1, o2) -> o1.getId() - o2.getId());

            b.内部比较 Comparable
                在对象类型的内部添加实现接口Comparable接口，
                同时实现:comparTo()方法
                    @Override
                    public int compareTo(User o) {
                        //this==>o1 o==>o2
                        return this.getId() - o.getId();
                    }
            c.外部比较Comparator和内部比较Comparable的区别？ 面试题
                Comparator属于Java.util包
                需要专门定义一个类来实现Comparator接口，并实现其compare()方法。
                不过可以通过匿名内部类来简化其过程，JDK1.8之后，还可以使用lamada表达式
                Comparable属于Java.lang包
                内部比较，在需要比较的类中实现Comparable接口，并且实现其comparTo()方法

                Comparator相比Comparable更加灵活，因为实现规则很多，更加便于比较其他类型，程序耦合性低。